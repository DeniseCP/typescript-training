{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction NumberFinderComponent_p_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Largest number is: \", ctx_r0.largestNumber, \" \");\n  }\n}\nexport class NumberFinderComponent {\n  constructor() {\n    this.numberList = '';\n    this.largestNumber = null;\n    this.arrayOfInputNs = [];\n  }\n  findLargestNumber() {\n    let auxArr = [];\n    if (this.numberList === null || this.numberList.trim().length === 0) {\n      return;\n    }\n    auxArr = this.numberList.split(';').filter(a => {\n      if (/^[0-9]*$/.test(a)) {\n        console.log(a);\n        return a;\n      }\n    });\n    console.log(auxArr);\n  }\n  static #_ = this.ɵfac = function NumberFinderComponent_Factory(t) {\n    return new (t || NumberFinderComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NumberFinderComponent,\n    selectors: [[\"app-number-finder\"]],\n    decls: 7,\n    vars: 2,\n    consts: [[\"type\", \"text\", \"name\", \"numberList\", \"id\", \"numberList\", \"placeholder\", \"Enter numbers (comma-separated)\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 3, \"click\"], [4, \"ngIf\"]],\n    template: function NumberFinderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"h1\");\n        i0.ɵɵtext(2, \"Find the Largest Number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function NumberFinderComponent_Template_input_ngModelChange_3_listener($event) {\n          return ctx.numberList = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function NumberFinderComponent_Template_button_click_4_listener() {\n          return ctx.findLargestNumber();\n        });\n        i0.ɵɵtext(5, \"Find Largest\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(6, NumberFinderComponent_p_6_Template, 2, 1, \"p\", 2);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.numberList);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.largestNumber !== null);\n      }\n    },\n    dependencies: [i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","largestNumber","NumberFinderComponent","constructor","numberList","arrayOfInputNs","findLargestNumber","auxArr","trim","length","split","filter","a","test","console","log","_","_2","selectors","decls","vars","consts","template","NumberFinderComponent_Template","rf","ctx","ɵɵlistener","NumberFinderComponent_Template_input_ngModelChange_3_listener","$event","NumberFinderComponent_Template_button_click_4_listener","ɵɵtemplate","NumberFinderComponent_p_6_Template","ɵɵproperty"],"sources":["C:\\code\\typescript-training\\src\\app\\number-finder\\number-finder.component.ts","C:\\code\\typescript-training\\src\\app\\number-finder\\number-finder.component.html"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-number-finder',\n  templateUrl: './number-finder.component.html',\n  styleUrls: ['./number-finder.component.css']\n})\nexport class NumberFinderComponent {\n\n  public largestNumber: number | null;\n  public numberList: string | null = '';\n\n  private arrayOfInputNs: number[];\n\n  constructor() {\n    this.largestNumber = null;\n    this.arrayOfInputNs = [];\n  }\n\n  public findLargestNumber(): void {\n    let auxArr: string[] = [];\n    if (this.numberList === null || this.numberList.trim().length === 0) {\n      return;\n    }\n\n    auxArr = this.numberList.split(';').filter(a => {\n      if (/^[0-9]*$/.test(a)) {\n        console.log(a);\n        return a;\n      }\n    });\n\n    console.log(auxArr);\n  }\n\n}\n","<div>\n  <h1>Find the Largest Number</h1>\n  <input type=\"text\" name=\"numberList\" id=\"numberList\" [(ngModel)]=\"numberList\" placeholder=\"Enter numbers (comma-separated)\" />\n  <button type=\"submit\" (click)=\"findLargestNumber()\">Find Largest</button>\n  <p *ngIf=\"largestNumber!==null\">Largest number is: {{largestNumber}} </p>\n</div>\n"],"mappings":";;;;;ICIEA,EAAA,CAAAC,cAAA,QAAgC;IAAAD,EAAA,CAAAE,MAAA,GAAqC;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;;IAAzCH,EAAA,CAAAI,SAAA,GAAqC;IAArCJ,EAAA,CAAAK,kBAAA,wBAAAC,MAAA,CAAAC,aAAA,MAAqC;;;ADGvE,OAAM,MAAOC,qBAAqB;EAOhCC,YAAA;IAJO,KAAAC,UAAU,GAAkB,EAAE;IAKnC,IAAI,CAACH,aAAa,GAAG,IAAI;IACzB,IAAI,CAACI,cAAc,GAAG,EAAE;EAC1B;EAEOC,iBAAiBA,CAAA;IACtB,IAAIC,MAAM,GAAa,EAAE;IACzB,IAAI,IAAI,CAACH,UAAU,KAAK,IAAI,IAAI,IAAI,CAACA,UAAU,CAACI,IAAI,EAAE,CAACC,MAAM,KAAK,CAAC,EAAE;MACnE;;IAGFF,MAAM,GAAG,IAAI,CAACH,UAAU,CAACM,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAACC,CAAC,IAAG;MAC7C,IAAI,UAAU,CAACC,IAAI,CAACD,CAAC,CAAC,EAAE;QACtBE,OAAO,CAACC,GAAG,CAACH,CAAC,CAAC;QACd,OAAOA,CAAC;;IAEZ,CAAC,CAAC;IAEFE,OAAO,CAACC,GAAG,CAACR,MAAM,CAAC;EACrB;EAAC,QAAAS,CAAA,G;qBA1BUd,qBAAqB;EAAA;EAAA,QAAAe,EAAA,G;UAArBf,qBAAqB;IAAAgB,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,+BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCPlC9B,EAAA,CAAAC,cAAA,UAAK;QACCD,EAAA,CAAAE,MAAA,8BAAuB;QAAAF,EAAA,CAAAG,YAAA,EAAK;QAChCH,EAAA,CAAAC,cAAA,eAA8H;QAAzED,EAAA,CAAAgC,UAAA,2BAAAC,8DAAAC,MAAA;UAAA,OAAAH,GAAA,CAAArB,UAAA,GAAAwB,MAAA;QAAA,EAAwB;QAA7ElC,EAAA,CAAAG,YAAA,EAA8H;QAC9HH,EAAA,CAAAC,cAAA,gBAAoD;QAA9BD,EAAA,CAAAgC,UAAA,mBAAAG,uDAAA;UAAA,OAASJ,GAAA,CAAAnB,iBAAA,EAAmB;QAAA,EAAC;QAACZ,EAAA,CAAAE,MAAA,mBAAY;QAAAF,EAAA,CAAAG,YAAA,EAAS;QACzEH,EAAA,CAAAoC,UAAA,IAAAC,kCAAA,eAAyE;QAC3ErC,EAAA,CAAAG,YAAA,EAAM;;;QAHiDH,EAAA,CAAAI,SAAA,GAAwB;QAAxBJ,EAAA,CAAAsC,UAAA,YAAAP,GAAA,CAAArB,UAAA,CAAwB;QAEzEV,EAAA,CAAAI,SAAA,GAA0B;QAA1BJ,EAAA,CAAAsC,UAAA,SAAAP,GAAA,CAAAxB,aAAA,UAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}